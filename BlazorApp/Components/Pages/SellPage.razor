@page "/products/sellpage"
@using Npgsql


<h3>Choose A Product to sell</h3>

<select @bind="selectedProductType">
    <option value="">-- Select --</option>
    <option value="CPU">CPU/Processor</option>
    <option value="GPU">Graphics Card/GPU</option>
    <option value="RAM">RAM</option>
</select>

@if (selectedProductType == ProductType.CPU)
{
    <div>
        <label>Brand: </label>
        <select @bind="brand">
            <option value="">-- Select --</option>
            <option value="Intel">Intel</option>
            <option value="AMD">AMD</option>
            <option value="Other">Other</option>
        </select>
    </div>
    <div>
        <label>Series: </label>
        <input type="text" @bind="series" />
    </div>
    <div>
        <label>Model: </label>
        <input type="text" @bind="model" />
    </div>
    <div>
        <label>Product Type: </label>
        <input type="text" @bind="selectedProductType" disabled />
    </div>
    <div>
        <label>Price: </label>
        <input type="number" @bind="price" />
    </div>
    <div>
        <label>Cores: </label>
        <input type="number" @bind="cores" />
    </div>
    <div>
        <label>Threads: </label>
        <input type="number" @bind="threads" />
    </div>
    <div>
        <label>Idle Clock Speed: </label>
        <input type="text" @bind="idle_clock_speed" />
    </div>
    <div>
        <label>Max Clock Speed: </label>
        <input type="text" @bind="max_clock_speed" />
    </div>
    <div>
        <label>Cache: </label>
        <input type="text" @bind="cache" />
    </div>
    <div>
        <label>Description: </label>
        <input type="text" @bind="description" />
    </div>
    <button @onclick="SellProduct">Sell Product</button>

}
else if (selectedProductType == ProductType.GPU)
{
    <div>
        <label>Brand: </label>
        <select @bind="brand">
            <option value="">-- Select --</option>
            <option value="NVIDIA">NVIDIA</option>
            <option value="Asus">Asus</option>
            <option value="MSI">MSI</option>
            <option value="PNY">PNY</option>
            <option value="AMD">AMD</option>
            <option value="Gigabyte">Gigabyte</option>
            <option value="Zotac">Zotac</option>
            <option value="Other">Other</option>
        </select>
    </div>
    <div>
        <label>Series: </label>
        <input type="text" @bind="series" />
    </div>
    <div>
        <label>Model: </label>
        <input type="text" @bind="model" />
    </div>
    <div>
        <label>Product Type: </label>
        <input type="text" @bind="selectedProductType" disabled />
    </div>
    <div>
        <label>Price: </label>
        <input type="number" @bind="price" />
    </div>
    <div>
        <label>VRAM: </label>
        <input type="text" @bind="vram" />
    </div>
    <div>
        <label>Ports: </label>
        <input type="text" @bind="ports" />
    </div>
    <div>
        <label>Description: </label>
        <input type="text" @bind="description" />
    </div>

    <button @onclick="SellProduct">Sell Product</button>
    }
else if (selectedProductType == ProductType.RAM)
{
    <div>
        <label>Brand: </label>
        <select @bind="brand">
            <option value="">-- Select --</option>
            <option value="Corsair">Corsair</option>
            <option value="G.Skill">G.Skill</option>
            <option value="Kingston">Kingston</option>
            <option value="Crucial">Crucial</option>
            <option value="Other">Other</option>
        </select>
    </div>
    <div>
        <label>Series: </label>
        <input type="text" @bind="series" />
    </div>
    <div>
        <label>Model: </label>
        <input type="text" @bind="model" />
    </div>
    <div>
        <label>Product Type: </label>
        <input type="text" @bind="selectedProductType" disabled />
    </div>
    <div>
        <label>Price: </label>
        <input type="number" @bind="price" />
    </div>
    <div>
        <label>RAM Type: </label>
        <select @bind="ramtype">
            <option value="">-- Select --</option>
            <option value="DDR3">DDR3</option>
            <option value="DDR4">DDR4</option>
            <option value="DDR5">DDR5</option>
            <option value="Other">Other</option>
        </select>
    </div>
    <div>
        <label>Capacity: </label>
        <input type="number" @bind="capacity" />
    </div>
    <div>
        <label>RAM Speed: </label>
        <input type="number" @bind="ramspeed" />
    </div>
    <div>
        <label>Description: </label>
        <input type="text" @bind="description" />
    </div>
    <button @onclick="SellProduct">Sell Product</button>




    


@code {
    string product_type;
    bool showInputFields;
    bool showGPUFields; // Add this variable to control the GPU form
    string brand;
    string series;
    string model;
    decimal price;
    int vram; // Add this variable for the VRAM field
    int cores;
    int threads;
    string idle_clock_speed;
    string max_clock_speed;
    string cache;
    string description;
    string ean_number; // Add this variable for the EAN number field
    string ports; // Add this variable for the Ports field
    string size; // Add this variable for the Size field
    string successMessage;
    string ramtype;
    int capacity;
    int ramspeed;


    enum ProductType
    {
        None,
        CPU,
        GPU,
        RAM
    }

    ProductType selectedProductType = ProductType.None;
    ProductType currentProductType = ProductType.None;

    void ShowForm(ProductType productType)
    {
        currentProductType = productType;
    }


    private void SellProduct()
    {


        string connectionString = "Host=ep-purple-star-a20n8auz.eu-central-1.aws.neon.tech;Port=5432;Username=techvendo69;Password=qVyZgOJ36HtK;Database=TechVendo;SslMode=Require;"; // Replace with actual connection string

        product_type = selectedProductType.ToString();

        using (var connection = new NpgsqlConnection(connectionString))
        {
            connection.Open();

            string sql = string.Empty;
            if (product_type == "CPU")
            {
                sql = $"INSERT INTO products (brand, series, model, product_type, price, cores, threads, idle_clock_speed, max_clock_speed, cache, description) VALUES ('{brand}', '{series}', '{model}', '{product_type}', {price}, {cores}, {threads}, '{idle_clock_speed}', '{max_clock_speed}', '{cache}', '{description}')";
            }
            else if (product_type == "GPU")
            {
                sql = $"INSERT INTO products (brand, series, model, product_type, price, vram, ports, description) VALUES ('{brand}', '{series}', '{model}', '{product_type}', {price}, '{vram}', '{ports}', '{description}')";
            }
            else if (product_type == "RAM")
            {
                sql = $"INSERT INTO products (brand, series, model, product_type, price, ramtype, capacity, ramspeed, description) VALUES ('{brand}', '{series}', '{model}', '{product_type}', {price}, '{ramtype}', {capacity}, {ramspeed}, '{description}')";
            }
            else
            {
               
                throw new InvalidOperationException($"Unexpected product type: {product_type}");
            }

            using (var command = new NpgsqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Brand", brand);
                command.Parameters.AddWithValue("@Series", series);
                command.Parameters.AddWithValue("@Model", model);
                command.Parameters.AddWithValue("@SelectedProduct", selectedProductType.ToString());
                command.Parameters.AddWithValue("@Price", price);

                if (product_type == "CPU")
                {
                    command.Parameters.AddWithValue("@Cores", cores);
                    command.Parameters.AddWithValue("@Threads", threads);
                    command.Parameters.AddWithValue("@idle_clock_speed", idle_clock_speed);
                    command.Parameters.AddWithValue("@Max_clock_speed", max_clock_speed);
                    command.Parameters.AddWithValue("@Cache", cache);
                    command.Parameters.AddWithValue("@Description", description);
                }
                else if (product_type == "GPU")
                {
                    command.Parameters.AddWithValue("@VRAM", vram);
                    command.Parameters.AddWithValue("@Ports", ports);
                    command.Parameters.AddWithValue("@Description", description);
                }
                else if (product_type == "RAM")
                {
                    command.Parameters.AddWithValue("@Ramtype", ramtype);
                    command.Parameters.AddWithValue("@Capacity", capacity);
                    command.Parameters.AddWithValue("@Ramspeed", ramspeed);
                    command.Parameters.AddWithValue("@Description", description);
                }

                command.ExecuteNonQuery();
            }

            // Show success message
            showInputFields = false; // Hide input fields after success
            showGPUFields = false; // Hide GPU fields after success
            successMessage = "Product successfully added!"; // Set a success message variable
        }
    }
}
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}
