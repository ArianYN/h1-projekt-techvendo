@page "/products"
@using Npgsql
@using ProductClassLibrary
@inject NavigationManager NavigationManager

<PageTitle>Products</PageTitle>


@* TODO: style this fucker *@
<div class="header d-flex justify-content-between align-items-center pt-3 text-center">
    <h1 class="prod-title">Products</h1>
    <div class="sellpage-btn-container">
        <button class="sellpage-btn" @onclick="NavigateToSellPage">Sell Item</button>
    </div>
</div>

<div class="product_type">
    <label style="color: white;">Product type:</label>
    <select @bind="selectedTypeOption">
        <option value="CPU">CPU</option>
        <option value="GPU">GPU</option>
    </select>
    <button @onclick="ProductType">Toggle Direction</button>
</div>

<div class="sort-reset">
    <label style="color: white;">Clear filter</label>
    <button @onclick="ProductReset">Clear filter</button>
</div>

<div class="sorting-options">
    <label style="color: white;">Sort By:</label>
    <select @bind="selectedSortOption">
        <option value="Price">Price</option>
        <option value="Brand">Brand</option>
    </select>
    <button @onclick="ToggleSortDirection">Toggle Direction</button>
</div>

<section class="products-section">
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @foreach (var product in sortedProducts)
            {
                <div class="col">
                    <div class="card shadow-sm">
                        <img src="..\images\product_16485448943db4ee0d12937fc435d5b5221c968702_grande.webp" class="card-img-top" alt="Product Image">
                        <div class="card-body">
                            <h5 class="card-title">@product.Brand @product.Series</h5>
                            <p class="card-text">
                                @product.Brand
                                @product.Series
                                @product.Model
                            </p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => OpenModal(product)">View</button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary">Price: @product.Price $</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@if (showModal)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedProduct.Brand</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    EAN Number: @selectedProduct.EANNumber
                    <br />
                    Product Type: @selectedProduct.Product_Type
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProductClass> products;
    private List<ProductClass> sortedProducts = new List<ProductClass>();
    private List<ProductClass> sortedtype;
    private List<ProductClass> filteredProducts = new List<ProductClass>(); 
    private bool showModal = false;
    private ProductClass selectedProduct;
    private string selectedSortOption = "Price";
    private string selectedTypeOption = "Product_Type";
    private bool sortAscending = true;



    private void NavigateToSellPage()
    {
        NavigationManager.NavigateTo("/products/sellpage");
    }


    void OpenModal(ProductClass product)
    {
        selectedProduct = product;
        showModal = true;
    }

    void CloseModal()
    {
        showModal = false;
    }

    private string connectionString = "Host=ep-purple-star-a20n8auz.eu-central-1.aws.neon.tech;Port=5432;Username=techvendo69;Password=qVyZgOJ36HtK;Database=TechVendo;SslMode=Require;";
    private NpgsqlConnection connection;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        connection = new NpgsqlConnection(connectionString);
        products = GetProducts();
        SortProducts();
    }

    public List<ProductClass> GetProducts()
    {
        var products = new List<ProductClass>();

        try
        {
            connection.Open();
            string SelectSQL = "SELECT * FROM products";

            using (NpgsqlCommand command = new NpgsqlCommand(SelectSQL, connection))
            {
                using (NpgsqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var product = new ProductClass
                            {
                                Price = (int)reader["price"],
                                EANNumber = reader["ean_number"].ToString(),
                                Brand = reader["brand"].ToString(),
                                Model = reader["model"].ToString(),
                                Series = reader["series"].ToString(),
                                Product_Type = reader["product_type"].ToString()
                            };
                        products.Add(product);
                        sortedProducts.Add(product);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            if (connection.State == System.Data.ConnectionState.Open)
            {
                connection.Close();
            }
        }

        return products;
    }


    void SortProducts()
    {
        switch (selectedSortOption)
        {
            case "Price":
                sortedProducts = sortAscending ? sortedProducts.OrderBy(p => p.Price).ToList() : sortedProducts.OrderByDescending(p => p.Price).ToList();
                break;
            case "Brand":
                sortedProducts = sortAscending ? sortedProducts.OrderBy(p => p.Brand).ToList() : sortedProducts.OrderByDescending(p => p.Brand).ToList();
                break;
        }
    }

    void SortType()
    {

    }

    void ToggleSortDirection()
    {
        sortAscending = !sortAscending;
        SortProducts();

    }

    void ProductType()
    {
        sortedProducts.Clear();
        foreach (ProductClass product in products)
        {
            if (product.Product_Type == selectedTypeOption)
            {
                sortedProducts.Add(product);
            }
        }
    }

    void ProductReset()
    {
        sortedProducts.Clear();
        foreach (ProductClass product in products)
        {
            sortedProducts.Add(product);
        }
    }
}

<style>
    body {
        background-color: #000;
    }

    .prod-title {
        color: white;
       text-align: right;
    }

    .card-body, .card {
        background-color: #525050;
        color: white;
        padding: 20px 20px;
        margin-bottom: 20px;
        border-radius: 10px;
    }

    .btn-outline-secondary {
        color: white;
    }

    .sellpage-btn {
        background-color: #808080; /* a grayish color */
        border-radius: 15px; /* makes the button more rounded */
        color: white; /* text color */
        padding: 10px 20px; /* button size */
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 15px 15px;
        cursor: pointer;
        position: relative; 
        right: 150%;
    }
</style>
