@page "/products"
@using Npgsql
@using ProductClassLibrary
@using ProductClassLibrary.Products
@inject NavigationManager NavigationManager
@inject LoginState LoginInfo
@inject LoginService LoginService

<PageTitle>Products</PageTitle>

@if (showNotSignedInMessage)
{
<div class="alert alert-warning alert-dismissible fade show" style="background-color: #226990" role="alert">
    <strong style="color: #ffff">Warning!</strong> <p  style="color: #ffff">You are not signed in. You will be redirected to the login page shortly.</p>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

}

@* Header/title name/page name*@
<div class="header d-flex justify-content-center align-items-center pt-3 text-center">
    <h1 class="prod-title">PRODUCTS</h1>
    </div>





@*making the sort btn*@
<div class="sort-btn d-flex align-content-center align-items-center pt-3 text-center">
    <button @onclick="ToggleSort">Sort Item</button>
    <div class="sellpage-btn-container">
    <button class="sellpage-btn" @onclick="NavigateToSellPage">Sell Item</button>
    </div>
    <div class="productSearch">
    <input @bind="searchedItem" class="searchbar" placeholder="Search...">  
    <button @onclick="SearchItems" class="search-btn">Search</button>
</div>
</div>



@*Cards/prodcut layout*@
<section class="products-section">
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @foreach (var product in productsToShow)
            {
                <div class="col">
                    <div class="card shadow-sm">
                        <img src="..\images\product_16485448943db4ee0d12937fc435d5b5221c968702_grande.webp" class="card-img-top" alt="Product Image">
                        <div class="card-body">
                            <h5 class="card-title">@product.Brand @product.Series</h5>
                            <p class="card-text">
                                @product.Brand
                                @product.Series
                                @product.Model
                            </p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => OpenModal(product)">View</button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary">Price: @product.Price $</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>


@*When you click view you get product information*@
@if (showModal)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedProduct.Brand</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">

                    <p><strong>Ports:</strong> @selectedProduct.Ports</p>
                    <p><strong>VRAM: </strong> @selectedProduct.VRAM</p>
                    <p><strong>Description: </strong>@selectedProduct.Description</p>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (sortModal)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Sort Products</h5>
                    <button type="button" class="btn-close" @onclick="CloseSortModal"></button>
                </div>
                <div class="modal-body">
                    <div class="sort-by-type">
                        <label style="color: black;">Sort By Type:</label>
                        <select @bind="selectedTypeOption">
                            <option value=""></OPTION>
                            <option value="CPU">CPU</option>
                            <option value="GPU">GPU</option>
                            <option value="Motherboard">Motherboard</option>
                            <option value="RAM">RAM</option>
                            <option value="Storage">Storage</option>
                            <option value="PowerSupply">Power Supply</option>
                            <option value="CPUCooler">CPU Cooler</option>
                            <option value="ThermalPaste">Thermal Paste</option>
                            </select>
                    </div>
                    <div class="sort-by-brand">
                        <label style="color: black;">Sort By Brand:</label>
                        <select @bind="selectedBrandOption">
                            <option value=""></option>
                                @if (ListedBrands.Any())
                                {
                                    ListedBrands.Clear();
                                }
                                @foreach (ProductClass product in products)
                                {
                                    if (!ListedBrands.Contains(product.Brand.ToLower()))
                                    {
                                        <option value="@product.Brand">@product.Brand</option>
                                        ListedBrands.Add(product.Brand.ToLower());
                                    }
                                    
                                }
                            </select>
                    </div>

                    <div class="sorting-options">
                    <label style="color: white;">Sort By:</label>
                    <select @bind="selectedSortOption">
                        <option value="Price">Price</option>
                        <option value="Brand">Brand</option>
                    </select>
                        <button @onclick="ToggleSortDirection">Sort: </button>
                    </div>

                    <div class="sort-reset">
                        <label style="color: white;">Clear filter</label>
                        <button @onclick="ProductReset">Clear filter</button>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSortModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="ApplySort">Apply Sort</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    @*List to make layout, sorting, and view box*@
    private List<ProductClass> products = new List<ProductClass>();
    private List<ProductClass> productsToShow = new List<ProductClass>();
    private List<ProductClass> filteredProducts = new List<ProductClass>();
    private List<ProductClass> productsToRemove = new List<ProductClass>();
    private List<string> ListedBrands = new List<string>();
    private bool showModal = false;
    private bool sortModal = false;
    private ProductClass selectedProduct = new ProductClass();
    private string selectedSortOption = "Price";
    private string selectedTypeOption = "Product_Type";
    private string selectedBrandOption = "Brand";
    private bool sortAscending = true;
    private bool showNotSignedInMessage = false;
    private System.Timers.Timer redirectTimer;



    private string searchedItem = "";

    @*private void to redirect to sellpage*@
    private void NavigateToSellPage()
    {
        if (LoginInfo.UserLoggedIn == true)
        {
            NavigationManager.NavigateTo("/products/sellpage");

        }
        else
        {
        showNotSignedInMessage = true;
        redirectTimer = new System.Timers.Timer(3000); // 5 seconds
        redirectTimer.Elapsed += (sender, e) => NavigateToLoginPage();
        redirectTimer.Start();
        }
    }

void NavigateToLoginPage()
{
    string returnUrl = NavigationManager.Uri;
    LoginService.NavigateToLogin(returnUrl);
    showNotSignedInMessage = false;
    redirectTimer.Stop();
}



    @*function for the view boxes to get information*@
    void OpenModal(ProductClass product)
    {
        selectedProduct = product;
        showModal = true;
    }

    @*Making sure you can closer the information box*@
    void CloseModal()
    {
        showModal = false;
    }

    void ToggleSort()
{
    sortModal = !sortModal;
}

void CloseSortModal()
{
    sortModal = false;
}

void ApplySort()
{
    productsToShow.Clear();

    foreach (ProductClass product in products)
    {
        productsToShow.Add(product);
    }

    productsToRemove.Clear();

    // Filter by Product Type (if selected)
    if (!string.IsNullOrEmpty(selectedTypeOption))
    {
        foreach (ProductClass product in productsToShow)
        {
            if (product.Product_Type != selectedTypeOption)
            {
                productsToRemove.Add(product);
            }
        }
    }

    if (selectedBrandOption == "Brand") 
        {
            selectedBrandOption = "";
        }

    // Filter by Brand (if selected)
    if (!string.IsNullOrEmpty(selectedBrandOption))
    {
        foreach (ProductClass product in productsToShow)
        {
            if (product.Brand != selectedBrandOption)
            {
                productsToRemove.Add(product);
            }
        }
    }

    // Apply Sort Order (ascending or descending)
    productsToShow = sortAscending ? productsToShow.OrderBy(p => p.Price).ToList() : productsToShow.OrderByDescending(p => p.Price).ToList();

    // Remove filtered products from the displayed list
    foreach (ProductClass product in productsToRemove)
    {
        productsToShow.Remove(product);
    }

    sortModal = false; // Close the sorting modal after applying filters
}


    @*connection to our sql server*@
    private string connectionString = "Host=ep-purple-star-a20n8auz.eu-central-1.aws.neon.tech;Port=5432;Username=techvendo69;Password=qVyZgOJ36HtK;Database=TechVendo;SslMode=Require;";
    private NpgsqlConnection connection;

    @*getting the information form our sql server*@
    protected override void OnInitialized()
    {
        base.OnInitialized();
        connection = new NpgsqlConnection(connectionString);
        products = GetProducts();
        SortProducts();
    }

    private void SearchItems()
    {
        productsToShow.Clear();
        products.Clear();

        if (searchedItem != "")
        {
            string SelectSQL = $"SELECT * FROM products WHERE LOWER( series ) LIKE '%{searchedItem.ToLower()}%'";
            try
            {
                connection.Open();
                using (NpgsqlCommand command = new NpgsqlCommand(SelectSQL, connection))
                {
                    using (NpgsqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var product = new ProductClass
                                {
                                    Price = (int)reader["price"],
                                    EANNumber = reader["ean_number"].ToString(),
                                    Brand = reader["brand"].ToString(),
                                    Model = reader["model"].ToString(),
                                    Series = reader["series"].ToString(),
                                    Description = reader["description"].ToString(),
                                    Product_Type = reader["product_type"].ToString()
                                };
                            products.Add(product);
                            productsToShow.Add(product);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
            finally
            {
                if (connection.State == System.Data.ConnectionState.Open)
                {
                    connection.Close();
                }
            }
        }
        else
        {
            GetProducts();
        }

    }


    public List<ProductClass> GetProducts()
    {
        productsToShow.Clear();
        try
        {
            connection.Open();
            string SelectSQL = "SELECT * FROM products";

            using (NpgsqlCommand command = new NpgsqlCommand(SelectSQL, connection))
            {
                using (NpgsqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var product = new ProductClass
                            {
                                Price = (int)reader["price"],
                                EANNumber = reader["ean_number"].ToString(),
                                Brand = reader["brand"].ToString(),
                                Model = reader["model"].ToString(),
                                Series = reader["series"].ToString(),
                                Description = reader["description"].ToString(),
                                Product_Type = reader["product_type"].ToString()
                            };
                        products.Add(product);
                        productsToShow.Add(product);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            if (connection.State == System.Data.ConnectionState.Open)
            {
                connection.Close();
            }
        }

        return products;
    }


    void SortProducts()
    {
        switch (selectedSortOption)
        {
            case "Price":
                productsToShow = sortAscending ? productsToShow.OrderBy(p => p.Price).ToList() : productsToShow.OrderByDescending(p => p.Price).ToList();
                break;
            case "Brand":
                productsToShow = sortAscending ? productsToShow.OrderBy(p => p.Brand).ToList() : productsToShow.OrderByDescending(p => p.Brand).ToList();
                break;
        }
    }

    void ToggleSortDirection()
    {
        sortAscending = !sortAscending;
        SortProducts();
    }

    void ToggleSort2()
    {
        productsToShow.Clear();

        foreach (ProductClass product in products)
        {
            productsToShow.Add(product);
        }

        productsToRemove.Clear();

        if (selectedTypeOption == "Product_Type")
        {
            selectedTypeOption = "";
        }

        if (!string.IsNullOrEmpty(selectedTypeOption))
        {
            foreach (ProductClass product in products)
            {
                if (product.Product_Type != selectedTypeOption)
                {
                    productsToRemove.Add(product);
                }
            }
        }

        if (selectedBrandOption == "Brand")
        {
            selectedBrandOption = "";
        } 

        if (!string.IsNullOrEmpty(selectedBrandOption))
        {
            foreach (ProductClass product in products)
            {
                if (product.Brand != selectedBrandOption)
                {
                    productsToRemove.Add(product);
                }
            }
        }

        foreach (ProductClass product in productsToRemove)
        {
            productsToShow.Remove(product);
        }
    }

    void ProductReset()
    {
        productsToShow.Clear();
        foreach (ProductClass product in products)
        {
            productsToShow.Add(product);
        }
    }
}

<style>
     body {
        background-color: #111111;
        overflow-x: hidden;
}
.sort-btn{
    position: relative;
    left:295px;
}

.prod-title {
    color:white;
    padding:20px;
    font-size: 50px;
    font-family: Arial, sans-serif;

}

.card-body, .card {
    background-color: #525050;
    color: white;
    padding: 20px 20px;
    margin-bottom: 20px;
    border-radius: 10px
}

.btn-outline-secondary {
    background-color:grey;
    color: white;
    box-shadow: 3px 4px 3px rgba(0, 0, 0, 0.2);
}

.sellpage-btn-container {
    padding: 20px; /* Adjust as needed */
}

.sellpage-btn {
    background-color: #226990;
    color: white;
    border: none;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    transition-duration: 0.4s;
    cursor: pointer;
    border-radius: 50px;
    font-family: Arial, sans-serif;
}

.sellpage-btn:hover {
    background-color: black;
    color: white;
    border: 2px solid #226990;
}

/* Styling for sort button */
.sort-btn button {
    background-color: #226990;
    color: white;
    border: none;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    transition-duration: 0.4s;
    cursor: pointer;
    border-radius: 50px; /* Increase border-radius for pill shape */
    font-family: Arial, sans-serif;
}

.sort-btn button:hover {
    background-color: black;
    color: white;
    border: 2px solid #226990;
}


/* Styling for product type select */
.product_type select {
    border-radius: 5px;
}

/* Styling for brand select */
.brand select {
    border-radius: 5px;
}

/* Styling for sorting options */
.sorting-options select {
    border-radius: 5px;
}

.sorting-options button {
    border-radius: 5px;
    background-color: #226990;
    color: white;
}

/* Styling for reset button */
.sort-reset button {
    border-radius: 5px;
    background-color: #226990;
    color: white;
}

.productSearch {
    display: flex;
    justify-content: center; 
    align-items: center;
    margin: auto;
    width: 50%;
    gap: 10px;
}
.searchbar {
    flex: 0 0 auto; /* Ensures the search bar does not stretch */
    padding: 10px 20px; /* Match the button's padding for same height */
    border: 1px solid #ccc;
    border-radius: 50px; /* Match the button's border radius */
    font-size: 16px; /* Match the button's font size */
    background-color: #454545;
    border-color: #454545;
    color: #d3d3d3;
    font-weight: bold;
    width: 400%; /* Four times the width of the button on small screens */
}

/* Medium screens (tablets, 768px and up) */
@@media only screen and (min-width: 768px) {
    .searchbar {
        width: auto; /* Auto width on medium screens */
    }
}

/* Large screens (desktops, 992px and up) */
@@media only screen and (min-width: 992px) {
    .searchbar {
        width: auto; /* Auto width on large screens */
    }
}





.search-btn {
    background-color: #226990;
    color: white;
    border: none;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    transition-duration: 0.4s;
    cursor: pointer;
    border-radius: 50px;
    font-family: Arial, sans-serif;
    width: 100%; /* Full width on small screens */
}

/* Medium screens (tablets, 768px and up) */
@@media only screen and (min-width: 768px) {
    .search-btn {
        width: auto; /* Auto width on medium screens */
    }
}

/* Large screens (desktops, 992px and up) */
@@media only screen and (min-width: 992px) {
    .search-btn {
        width: auto; /* Auto width on large screens */
    }
}




</style>